# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

silent: true

vars:
  SOPS_CONFIG_FILE: ".sops.yaml"

env:
  SOPS_AGE_KEY_FILE: "$HOME/.config/sops/age/keys.txt"

tasks:
  preconditions:check:
    desc: Check for preconditions before running tasks
    preconditions:
      - sh: test -f {{.SOPS_CONFIG_FILE}}
        msg: "SOPS configuration file not found: {{.SOPS_CONFIG_FILE}}"
      - sh: test -f {{.SOPS_AGE_KEY_FILE}}
        msg: "SOPS AGE key file not found: {{.SOPS_AGE_KEY_FILE}}"
      - sh: test -f {{.SOPS_FILE}}
        msg: "SOPS file not found: {{.SOPS_FILE}}"
    cmd: echo "All preconditions met."
    requires:
      vars: [SOPS_FILE]
    internal: true

  validate:*:
    desc: Validate a SOPS file against the SOPS configuration
    vars:
      SOPS_ENCRYPTED_FILE: "{{index .MATCH 0}}"
    deps:
      - task: preconditions:check
        vars:
          SOPS_FILE: "{{.SOPS_ENCRYPTED_FILE}}"
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        if [ "${DEBUG}" == "true" ]; then
          echo "     SOPS_ENCRYPTED_FILE: {{.SOPS_ENCRYPTED_FILE}}"
          echo "     SOPS_CONFIG_FILE: {{.SOPS_CONFIG_FILE}}"
        fi

        if [ "{{.DRY_RUN}}" == "true" ]; then
          echo "     Skipping command execution due to DRY_RUN."
        else
          yq e '.sops' "{{.SOPS_ENCRYPTED_FILE}}"
          sops -d "{{.SOPS_ENCRYPTED_FILE}}" > /dev/null
        fi

  validate:all:
    desc: Validate all SOPS files matching patterns defined in .sops.yaml
    deps:
      - task: preconditions:check
        vars:
          SOPS_FILE: "{{.SOPS_ENCRYPTED_FILE}}"
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        files=$(find . -maxdepth 1 -type f -name 'sops.*' -printf "%f\n")

        for file in $files; do
          task sops:validate:"$file"
        done

  encryp:
    desc: "Encrypt a file"
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        OUTPUT_FILE="sops.{{.SECRET_FILE}}"
        OUTPUT_FILE=$(echo "$OUTPUT_FILE" | sed 's/\.\./\./g')

        if [ "${DEBUG}" == "true" ]; then
          echo "     SECRET_FILE: {{.SECRET_FILE}}"
          echo "     OUTPUT_FILE: $OUTPUT_FILE"
        fi

        if [ "{{.DRY_RUN}}" == "true" ]; then
          echo "     Skipping command execution due to DRY_RUN."
        else
          if [ "${DEBUG}" == "true" ]; then
            echo "     COMMAND: sops --encrypt {{.SECRET_FILE}} > $OUTPUT_FILE"
          fi
          sops --encrypt {{.SECRET_FILE}} > "$OUTPUT_FILE"
        fi
    requires:
      vars: [SECRET_FILE]

  decrypt:
    desc: "Decrypt a file"
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        # Determine the output filename based on file type
        if [[ "{{.ENCRYPTED_FILE}}" == *".env" ]]; then
          # For files ending with .env: remove 'sops' but keep the leading dot
          OUTPUT_FILE=$(echo "{{.ENCRYPTED_FILE}}" | sed 's/^sops//')
        else
          # For other files: remove 'sops.'
          OUTPUT_FILE=$(echo "{{.ENCRYPTED_FILE}}" | sed 's/^sops\.//')
        fi

        if [ "${DEBUG}" == "true" ]; then
          echo "     ENCRYPTED_FILE: {{.ENCRYPTED_FILE}}"
          echo "     OUTPUT_FILE: $OUTPUT_FILE"
        fi

        if [ "{{.DRY_RUN}}" == "true" ]; then
          echo "     Skipping command execution due to DRY_RUN."
        else
          if [ "${DEBUG}" == "true" ]; then
            echo "     COMMAND: sops --decrypt {{.ENCRYPTED_FILE}} > $OUTPUT_FILE"
          fi
          sops --decrypt {{.ENCRYPTED_FILE}} > "$OUTPUT_FILE"
        fi
    requires:
      vars: [ENCRYPTED_FILE]

  edit:
    desc: "Edit a file with sops"
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        if [ "${DEBUG}" == "true" ]; then
          echo "     ENCRYPTED_FILE: {{.ENCRYPTED_FILE}}"
        fi

        if [ "{{.DRY_RUN}}" == "true" ]; then
          echo "     Skipping command execution due to DRY_RUN."
        else
          if [ "${DEBUG}" == "true" ]; then
            echo "     COMMAND: sops edit {{.ENCRYPTED_FILE}}"
          fi
          sops edit "{{.ENCRYPTED_FILE}}"
        fi
    requires:
      vars: [ENCRYPTED_FILE]

  decrypt:all:
    desc: Decrypt all files matching patterns defined in .sops.yaml
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"

        files=$(find . -maxdepth 1 -type f -name 'sops.*' -printf "%f\n")

        for file in $files; do
          task sops:decrypt ENCRYPTED_FILE="$file"
        done

  encrypt:all:
    desc: Encrypt all files matching patterns defined in .sops.yaml
    cmds:
      - |
        echo ""
        echo "ðŸš€ {{.TASK}} ($(pwd))"
        echo "Finding and encrypting files based on .sops.yaml creation rules..."

        # Extract path_regex patterns from .sops.yaml and convert to simple patterns
        path_regexes=$(yq eval '.creation_rules[].path_regex' .sops.yaml)

        for regex in $path_regexes; do
          echo "Processing regex: $regex"
          
          # Convert common regex patterns to simple filenames
          if [[ "$regex" == "^secrets\\.yml$" ]]; then
            filename="secrets.yml"
          elif [[ "$regex" == "^\\.env$" ]]; then
            filename=".env"
          else
            # For other patterns, try to extract the filename
            filename=$(echo "$regex" | sed 's/\^//g' | sed 's/\$$//g' | sed 's/\\//g')
          fi
          
          if [[ -f "$filename" ]]; then
            echo "Found and encrypting: $filename"
            task sops:encryp SECRET_FILE="$filename"
          else
            echo "File not found: $filename"
          fi
        done
