# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

silent: true

tasks:
  # =================
  # === TERRAFORM ===
  # =================
  # init:
  #   desc: "Terraform initialize"
  #   dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
  #   vars:
  #     TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
  #   cmds:
  #     - |
  #       if [ "$SKIP_TERRAFORM" == "true" ]; then
  #         echo "SKIP_TERRAFORM is set to true, skipping task {{.TASK}}."
  #         exit 0
  #       fi

  #       echo ""
  #       echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
  #       echo "   cwd: $(pwd)"
  #       echo ""
  #       terraform init -upgrade
  #   requires:
  #     vars: [STAGE]

  init:
    desc: "Terraform initialize"
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
    cmds:
      - |
        if [ "$SKIP_TERRAFORM" == "true" ]; then
          echo "SKIP_TERRAFORM is set to true, skipping task {{.TASK}}."
          exit 0
        fi

        echo "TF_HTTP_PASSWORD: {{.TF_HTTP_PASSWORD}}, STAGE: {{.STAGE}}, GITLAB_HOST: {{.GITLAB_HOST}}, GITLAB_PROJECT_ID: {{.GITLAB_PROJECT_ID}}"
        echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}}, GITLAB_HOST - {{.GITLAB_HOST}}, HTTP_USERNAME - {{.HTTP_USERNAME}}, HTTP_PASSWORD - ***, GITLAB_PROJECT_ID - {{.GITLAB_PROJECT_ID}} ]"
        echo "   cwd: $(pwd)"
        echo ""

        terraform init -reconfigure \
          -backend-config="address=https://{{.GITLAB_HOST}}/api/v4/projects/{{.GITLAB_PROJECT_ID}}/terraform/state/{{.STAGE}}" \
          -backend-config="lock_address=https://{{.GITLAB_HOST}}/api/v4/projects/{{.GITLAB_PROJECT_ID}}/terraform/state/{{.STAGE}}/lock" \
          -backend-config="unlock_address=https://{{.GITLAB_HOST}}/api/v4/projects/{{.GITLAB_PROJECT_ID}}/terraform/state/{{.STAGE}}/lock" \
          -backend-config="username=abes140377" \
          -backend-config="password={{.TF_HTTP_PASSWORD}}" \
          -backend-config="lock_method=POST" \
          -backend-config="unlock_method=DELETE" \
          -backend-config="retry_wait_min=5"
    requires:
      vars: [STAGE, GITLAB_HOST, GITLAB_PROJECT_ID]

  lint:
    desc: Run all tests
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
    cmds:
      - echo ""
      - echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
      - 'echo "   cwd: $(pwd)"'
      - echo ""
      - tflint
      - terraform validate
      - echo ""
      - terraform fmt -check -diff -recursive
      - echo ""
    requires:
      vars: [STAGE]

  plan:
    desc: "Terraform plan"
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
      VAR_FILE_ARGS:
        sh: 'if [ -f "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}/{{.STAGE}}.tfvars" ]; then echo "-var-file={{.STAGE}}.tfvars"; else echo ""; fi'
    cmds:
      - |
        if [ "$SKIP_TERRAFORM" == "true" ]; then
          echo "SKIP_TERRAFORM is set to true, skipping task {{.TASK}}."
          exit 0
        fi

        echo ""
        pwd
        echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
        echo "   cwd: $(pwd)"
        terraform plan {{.VAR_FILE_ARGS}} -out=.terraform/tfplan
    requires:
      vars: [STAGE]

  show:
    desc: "Terraform show"
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
      VAR_FILE_ARGS:
        sh: 'if [ -f "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}/{{.STAGE}}.tfvars" ]; then echo "-var-file={{.STAGE}}.tfvars"; else echo ""; fi'
    cmds:
      - |
        if [ "$SKIP_TERRAFORM" == "true" ]; then
          echo "SKIP_TERRAFORM is set to true, skipping task {{.TASK}}."
          exit 0
        fi

        echo ""
        echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
        echo "   cwd: $(pwd)"
        echo ""
        terraform show -json .terraform/tfplan > .terraform/tfplan.tfgraph
    requires:
      vars: [STAGE]

  apply:
    desc: "Terraform apply"
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
      AUTO_APPLY: '{{default "false" .AUTO_APPLY}}'
    cmds:
      - |
        if [ "$SKIP_TERRAFORM" == "true" ]; then
          echo "SKIP_TERRAFORM is set to true, skipping task {{.TASK}}."
          exit 0
        fi
        echo ""
        echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
        echo "   cwd: $(pwd)"
        echo ""

        if [[ "{{.AUTO_APPLY}}" == true ]]; then
          terraform apply .terraform/tfplan
          exit 0
        fi

        echo "Do you want to apply the Terraform plan? (yes/No)"
        read -r response
        if [[ "{{.AUTO_APPLY}}" == true || "$response" =~ ^[yY][eE][sS]$ ]]; then
          terraform apply .terraform/tfplan
        else
          echo "Terraform apply aborted."
          exit 0
        fi
    requires:
      vars: [STAGE]

  destroy:
    desc: "Terraform destroy"
    dir: "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}"
    vars:
      TERRAFORM_DIR: '{{default "1-terraform" .TERRAFORM_DIR}}'
      VAR_FILE_ARGS:
        sh: 'if [ -f "{{.USER_WORKING_DIR}}/{{.TERRAFORM_DIR}}/environment/{{.STAGE}}/{{.STAGE}}.tfvars" ]; then echo "-var-file={{.STAGE}}.tfvars"; else echo ""; fi'
    cmds:
      - |
        echo ""
        echo "ðŸš€ tasks-terraform - {{.TASK}} [ TERRAFORM_DIR - {{.TERRAFORM_DIR}}, STAGE - {{.STAGE}} ]"
        echo "   cwd: $(pwd)"
        echo ""
        terraform destroy {{.VAR_FILE_ARGS}}
    requires:
      vars: [STAGE]
